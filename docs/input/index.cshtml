Title: Home
NoSidebar: true
NoContainer: true
NoGutter: true
---

<div class="jumbotron">
    <div class="container">
        <h1>A parametrized string library!</h1>
    </div>

    <br/>
    <br/>

    <div class="container">
	    <p>
            <h3><strong>Strinken</strong> is focused on giving the possibility to the user of an application to easily change its configuration by using string interpolation. 
            This is achieved by restricting the possible variables to a definite set (tags, filters, ...) that the user can see and only allowing this set. Thanks to this restriction,
            no reflection is needed and the string resolution is fast.</h3>
        </p>
    </div>
</div>

<div class="container">				
	<h1>Installation</h1>
	<hr />

    <ul>
		<li>Grab the latest package on <strong><a href="https://www.nuget.org/packages/Strinken/">NuGet</a></strong>.</li>
		<li>Get the latest CI build on <strong><a href="https://ci.appveyor.com/project/k94ll13nn3/strinken">AppVeyor</a></strong> (Visual Studio image).</li>
    </ul>
	
	<h1>Basic example</h1>
	<hr />
    @{
        string usage = Context.GetLink("documentation/parser/usage/");    
        string parserAPI = Context.GetLink("api") + "/Strinken/Parser_1/";    
        string tagAPI = Context.GetLink("api") + "/Strinken/ITag_1//";    

        <p><b>1.</b> Create a class that implements <strong><a href="@tagAPI">ITag&lt;T&gt;</a></strong> for the wanted type (a class Person with a Name property for example): 
        <pre lang="csharp"><code class="cs">public class NameTag : ITag&lt;Person&gt;
{
    public string Description =&gt; "Returns the name of a Person.";
    public string Name =&gt; "Name";
    public string Resolve(Person value) =&gt; value.Name.ToString();
}</code></pre>
        </p>
        <p><b>2.</b> Create a <strong><a href="@parserAPI">Parser&lt;T&gt;</a></strong> with this tag: 
        <pre><code class="cs">var parser = new Parser&lt;Person&gt;().WithTag(new NameTag());</code></pre>
        </p>
        <p><b>3.</b> Resolve a string with the parser: 
        <pre><code class="cs">var result = parser.Resolve("My name is {Name}.", new Person { Name = "James" }); // will return "My name is James."</code></pre>
        </p>
        <p>
            For more complex examples with multiple tags, filters and parameter tags, see <strong><a href="@usage">the usage section</a></strong>. 
            The code of this example is <strong><a href="@Context.String(DocsKeys.BaseEditUrl)code/basic-example.csx">here</a></strong>.
        </p>
    }
</div>
